{"ts":1393234736125,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n * alertify\n * An unobtrusive customizable JavaScript notification system\n *\n * @author Fabien Doiron <fabien.doiron@gmail.com>\n * @copyright Fabien Doiron 2013\n * @license MIT <http://opensource.org/licenses/mit-license.php>\n * @link http://fabien-d.github.com/alertify.js/\n * @module alertify\n * @version 0.3.11\n */\n(function (global, undefined) {\n\t\"use strict\";\n\n\tvar document = global.document,\n\t    Alertify;\n\n\tAlertify = function () {\n\n\t\tvar _alertify = {},\n\t\t    dialogs   = {},\n\t\t    isopen    = false,\n\t\t    keys      = { ENTER: 13, ESC: 27, SPACE: 32 },\n\t\t    queue     = [],\n\t\t    $, btnCancel, btnOK, btnReset, btnResetBack, btnFocus, elCallee, elCover, elDialog, elLog, form, input, getTransitionEvent;\n\n\t\t/**\n\t\t * Markup pieces\n\t\t * @type {Object}\n\t\t */\n\t\tdialogs = {\n\t\t\tbuttons : {\n\t\t\t\tholder : \"<nav class=\\\"alertify-buttons\\\">{{buttons}}</nav>\",\n\t\t\t\tsubmit : \"<button type=\\\"submit\\\" class=\\\"alertify-button alertify-button-ok\\\" id=\\\"alertify-ok\\\">{{ok}}</button>\",\n\t\t\t\tok     : \"<button class=\\\"alertify-button alertify-button-ok\\\" id=\\\"alertify-ok\\\">{{ok}}</button>\",\n\t\t\t\tcancel : \"<button class=\\\"alertify-button alertify-button-cancel\\\" id=\\\"alertify-cancel\\\">{{cancel}}</button>\"\n\t\t\t},\n\t\t\tinput   : \"<div class=\\\"alertify-text-wrapper\\\"><input type=\\\"text\\\" class=\\\"alertify-text\\\" id=\\\"alertify-text\\\"></div>\",\n\t\t\tmessage : \"<p class=\\\"alertify-message\\\">{{message}}</p>\",\n\t\t\tlog     : \"<article class=\\\"alertify-log{{class}}\\\">{{message}}</article>\"\n\t\t};\n\n\t\t/**\n\t\t * Return the proper transitionend event\n\t\t * @return {String}    Transition type string\n\t\t */\n\t\tgetTransitionEvent = function () {\n\t\t\tvar t,\n\t\t\t    type,\n\t\t\t    supported   = false,\n\t\t\t    el          = document.createElement(\"fakeelement\"),\n\t\t\t    transitions = {\n\t\t\t\t    \"WebkitTransition\" : \"webkitTransitionEnd\",\n\t\t\t\t    \"MozTransition\"    : \"transitionend\",\n\t\t\t\t    \"OTransition\"      : \"otransitionend\",\n\t\t\t\t    \"transition\"       : \"transitionend\"\n\t\t\t    };\n\n\t\t\tfor (t in transitions) {\n\t\t\t\tif (el.style[t] !== undefined) {\n\t\t\t\t\ttype      = transitions[t];\n\t\t\t\t\tsupported = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttype      : type,\n\t\t\t\tsupported : supported\n\t\t\t};\n\t\t};\n\n\t\t/**\n\t\t * Shorthand for document.getElementById()\n\t\t *\n\t\t * @param  {String} id    A specific element ID\n\t\t * @return {Object}       HTML element\n\t\t */\n\t\t$ = function (id) {\n\t\t\treturn document.getElementById(id);\n\t\t};\n\n\t\t/**\n\t\t * Alertify private object\n\t\t * @type {Object}\n\t\t */\n\t\t_alertify = {\n\n\t\t\t/**\n\t\t\t * Labels object\n\t\t\t * @type {Object}\n\t\t\t */\n\t\t\tlabels : {\n\t\t\t\tok     : \"OK\",\n\t\t\t\tcancel : \"Cancel\"\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Delay number\n\t\t\t * @type {Number}\n\t\t\t */\n\t\t\tdelay : 5000,\n\n\t\t\t/**\n\t\t\t * Whether buttons are reversed (default is secondary/primary)\n\t\t\t * @type {Boolean}\n\t\t\t */\n\t\t\tbuttonReverse : false,\n\n\t\t\t/**\n\t\t\t * Which button should be focused by default\n\t\t\t * @type {String}\t\"ok\" (default), \"cancel\", or \"none\"\n\t\t\t */\n\t\t\tbuttonFocus : \"ok\",\n\n\t\t\t/**\n\t\t\t * Set the transition event on load\n\t\t\t * @type {[type]}\n\t\t\t */\n\t\t\ttransition : undefined,\n\n\t\t\t/**\n\t\t\t * Set the proper button click events\n\t\t\t *\n\t\t\t * @param {Function} fn    [Optional] Callback function\n\t\t\t *\n\t\t\t * @return {undefined}\n\t\t\t */\n\t\t\taddListeners : function (fn) {\n\t\t\t\tvar hasOK     = (typeof btnOK !== \"undefined\"),\n\t\t\t\t    hasCancel = (typeof btnCancel !== \"undefined\"),\n\t\t\t\t    hasInput  = (typeof input !== \"undefined\"),\n\t\t\t\t    val       = \"\",\n\t\t\t\t    self      = this,\n\t\t\t\t    ok, cancel, common, key, reset;\n\n\t\t\t\t// ok event handler\n\t\t\t\tok = function (event) {\n\t\t\t\t\tif (typeof event.preventDefault !== \"undefined\") event.preventDefault();\n\t\t\t\t\tcommon(event);\n\t\t\t\t\tif (typeof input !== \"undefined\") val = input.value;\n\t\t\t\t\tif (typeof fn === \"function\") {\n\t\t\t\t\t\tif (typeof input !== \"undefined\") {\n\t\t\t\t\t\t\tfn(true, val);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse fn(true);\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t};\n\n\t\t\t\t// cancel event handler\n\t\t\t\tcancel = function (event) {\n\t\t\t\t\tif (typeof event.preventDefault !== \"undefined\") event.preventDefault();\n\t\t\t\t\tcommon(event);\n\t\t\t\t\tif (typeof fn === \"function\") fn(false);\n\t\t\t\t\treturn false;\n\t\t\t\t};\n\n\t\t\t\t// common event handler (keyup, ok and cancel)\n\t\t\t\tcommon = function (event) {\n\t\t\t\t\tself.hide();\n\t\t\t\t\tself.unbind(document.body, \"keyup\", key);\n\t\t\t\t\tself.unbind(btnReset, \"focus\", reset);\n\t\t\t\t\tif (hasOK) self.unbind(btnOK, \"click\", ok);\n\t\t\t\t\tif (hasCancel) self.unbind(btnCancel, \"click\", cancel);\n\t\t\t\t};\n\n\t\t\t\t// keyup handler\n\t\t\t\tkey = function (event) {\n\t\t\t\t\tvar keyCode = event.keyCode;\n\t\t\t\t\tif ((keyCode === keys.SPACE && !hasInput) || (hasInput && keyCode === keys.ENTER)) ok(event);\n\t\t\t\t\tif (keyCode === keys.ESC && hasCancel) cancel(event);\n\t\t\t\t};\n\n\t\t\t\t// reset focus to first item in the dialog\n\t\t\t\treset = function (event) {\n\t\t\t\t\tif (hasInput) input.focus();\n\t\t\t\t\telse if (!hasCancel || self.buttonReverse) btnOK.focus();\n\t\t\t\t\telse btnCancel.focus();\n\t\t\t\t};\n\n\t\t\t\t// handle reset focus link\n\t\t\t\t// this ensures that the keyboard focus does not\n\t\t\t\t// ever leave the dialog box until an action has\n\t\t\t\t// been taken\n\t\t\t\tthis.bind(btnReset, \"focus\", reset);\n\t\t\t\tthis.bind(btnResetBack, \"focus\", reset);\n\t\t\t\t// handle OK click\n\t\t\t\tif (hasOK) this.bind(btnOK, \"click\", ok);\n\t\t\t\t// handle Cancel click\n\t\t\t\tif (hasCancel) this.bind(btnCancel, \"click\", cancel);\n\t\t\t\t// listen for keys, Cancel => ESC\n\t\t\t\tthis.bind(document.body, \"keyup\", key);\n\t\t\t\tif (!this.transition.supported) {\n\t\t\t\t\tthis.setFocus();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Bind events to elements\n\t\t\t *\n\t\t\t * @param  {Object}   el       HTML Object\n\t\t\t * @param  {Event}    event    Event to attach to element\n\t\t\t * @param  {Function} fn       Callback function\n\t\t\t *\n\t\t\t * @return {undefined}\n\t\t\t */\n\t\t\tbind : function (el, event, fn) {\n\t\t\t\tif (typeof el.addEventListener === \"function\") {\n\t\t\t\t\tel.addEventListener(event, fn, false);\n\t\t\t\t} else if (el.attachEvent) {\n\t\t\t\t\tel.attachEvent(\"on\" + event, fn);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Use alertify as the global error handler (using window.onerror)\n\t\t\t *\n\t\t\t * @return {boolean} success\n\t\t\t */\n\t\t\thandleErrors : function () {\n\t\t\t\tif (typeof global.onerror !== \"undefined\") {\n\t\t\t\t\tvar self = this;\n\t\t\t\t\tglobal.onerror = function (msg, url, line) {\n\t\t\t\t\t\tself.error(\"[\" + msg + \" on line \" + line + \" of \" + url + \"]\", 0);\n\t\t\t\t\t};\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Append button HTML strings\n\t\t\t *\n\t\t\t * @param {String} secondary    The secondary button HTML string\n\t\t\t * @param {String} primary      The primary button HTML string\n\t\t\t *\n\t\t\t * @return {String}             The appended button HTML strings\n\t\t\t */\n\t\t\tappendButtons : function (secondary, primary) {\n\t\t\t\treturn this.buttonReverse ? primary + secondary : secondary + primary;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Build the proper message box\n\t\t\t *\n\t\t\t * @param  {Object} item    Current object in the queue\n\t\t\t *\n\t\t\t * @return {String}         An HTML string of the message box\n\t\t\t */\n\t\t\tbuild : function (item) {\n\t\t\t\tvar html    = \"\",\n\t\t\t\t    type    = item.type,\n\t\t\t\t    message = item.message,\n\t\t\t\t    css     = item.cssClass || \"\";\n\n\t\t\t\thtml += \"<div class=\\\"alertify-dialog\\\">\";\n\t\t\t\thtml += \"<a id=\\\"alertify-resetFocusBack\\\" class=\\\"alertify-resetFocus\\\" href=\\\"#\\\">Reset Focus</a>\";\n\n\t\t\t\tif (_alertify.buttonFocus === \"none\") html += \"<a href=\\\"#\\\" id=\\\"alertify-noneFocus\\\" class=\\\"alertify-hidden\\\"></a>\";\n\n\t\t\t\t// doens't require an actual form\n\t\t\t\tif (type === \"prompt\") html += \"<div id=\\\"alertify-form\\\">\";\n\n\t\t\t\thtml += \"<article class=\\\"alertify-inner\\\">\";\n\t\t\t\thtml += dialogs.message.replace(\"{{message}}\", message);\n\n\t\t\t\tif (type === \"prompt\") html += dialogs.input;\n\n\t\t\t\thtml += dialogs.buttons.holder;\n\t\t\t\thtml += \"</article>\";\n\n\t\t\t\tif (type === \"prompt\") html += \"</div>\";\n\n\t\t\t\thtml += \"<a id=\\\"alertify-resetFocus\\\" class=\\\"alertify-resetFocus\\\" href=\\\"#\\\">Reset Focus</a>\";\n\t\t\t\thtml += \"</div>\";\n\n\t\t\t\tswitch (type) {\n\t\t\t\tcase \"confirm\":\n\t\t\t\t\thtml = html.replace(\"{{buttons}}\", this.appendButtons(dialogs.buttons.cancel, dialogs.buttons.ok));\n\t\t\t\t\thtml = html.replace(\"{{ok}}\", this.labels.ok).replace(\"{{cancel}}\", this.labels.cancel);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"prompt\":\n\t\t\t\t\thtml = html.replace(\"{{buttons}}\", this.appendButtons(dialogs.buttons.cancel, dialogs.buttons.submit));\n\t\t\t\t\thtml = html.replace(\"{{ok}}\", this.labels.ok).replace(\"{{cancel}}\", this.labels.cancel);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"alert\":\n\t\t\t\t\thtml = html.replace(\"{{buttons}}\", dialogs.buttons.ok);\n\t\t\t\t\thtml = html.replace(\"{{ok}}\", this.labels.ok);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\telDialog.className = \"alertify alertify-\" + type + \" \" + css;\n\t\t\t\telCover.className  = \"alertify-cover\";\n\t\t\t\treturn html;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Close the log messages\n\t\t\t *\n\t\t\t * @param  {Object} elem    HTML Element of log message to close\n\t\t\t * @param  {Number} wait    [optional] Time (in ms) to wait before automatically hiding the message, if 0 never hide\n\t\t\t *\n\t\t\t * @return {undefined}\n\t\t\t */\n\t\t\tclose : function (elem, wait) {\n\t\t\t\t// Unary Plus: +\"2\" === 2\n\t\t\t\tvar timer = (wait && !isNaN(wait)) ? +wait : this.delay,\n\t\t\t\t    self  = this,\n\t\t\t\t    hideElement, transitionDone;\n\n\t\t\t\t// set click event on log messages\n\t\t\t\tthis.bind(elem, \"click\", function () {\n\t\t\t\t\thideElement(elem);\n\t\t\t\t});\n\t\t\t\t// Hide the dialog box after transition\n\t\t\t\t// This ensure it doens't block any element from being clicked\n\t\t\t\ttransitionDone = function (event) {\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t// unbind event so function only gets called once\n\t\t\t\t\tself.unbind(this, self.transition.type, transitionDone);\n\t\t\t\t\t// remove log message\n\t\t\t\t\telLog.removeChild(this);\n\t\t\t\t\tif (!elLog.hasChildNodes()) elLog.className += \" alertify-logs-hidden\";\n\t\t\t\t};\n\t\t\t\t// this sets the hide class to transition out\n\t\t\t\t// or removes the child if css transitions aren't supported\n\t\t\t\thideElement = function (el) {\n\t\t\t\t\t// ensure element exists\n\t\t\t\t\tif (typeof el !== \"undefined\" && el.parentNode === elLog) {\n\t\t\t\t\t\t// whether CSS transition exists\n\t\t\t\t\t\tif (self.transition.supported) {\n\t\t\t\t\t\t\tself.bind(el, self.transition.type, transitionDone);\n\t\t\t\t\t\t\tel.className += \" alertify-log-hide\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\telLog.removeChild(el);\n\t\t\t\t\t\t\tif (!elLog.hasChildNodes()) elLog.className += \" alertify-logs-hidden\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t// never close (until click) if wait is set to 0\n\t\t\t\tif (wait === 0) return;\n\t\t\t\t// set timeout to auto close the log message\n\t\t\t\tsetTimeout(function () { hideElement(elem); }, timer);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Create a dialog box\n\t\t\t *\n\t\t\t * @param  {String}   message        The message passed from the callee\n\t\t\t * @param  {String}   type           Type of dialog to create\n\t\t\t * @param  {Function} fn             [Optional] Callback function\n\t\t\t * @param  {String}   placeholder    [Optional] Default value for prompt input field\n\t\t\t * @param  {String}   cssClass       [Optional] Class(es) to append to dialog box\n\t\t\t *\n\t\t\t * @return {Object}\n\t\t\t */\n\t\t\tdialog : function (message, type, fn, placeholder, cssClass) {\n\t\t\t\t// set the current active element\n\t\t\t\t// this allows the keyboard focus to be resetted\n\t\t\t\t// after the dialog box is closed\n\t\t\t\telCallee = document.activeElement;\n\t\t\t\t// check to ensure the alertify dialog element\n\t\t\t\t// has been successfully created\n\t\t\t\tvar check = function () {\n\t\t\t\t\tif ((elLog && elLog.scrollTop !== null) && (elCover && elCover.scrollTop !== null)) return;\n\t\t\t\t\telse check();\n\t\t\t\t};\n\t\t\t\t// error catching\n\t\t\t\tif (typeof message !== \"string\") throw new Error(\"message must be a string\");\n\t\t\t\tif (typeof type !== \"string\") throw new Error(\"type must be a string\");\n\t\t\t\tif (typeof fn !== \"undefined\" && typeof fn !== \"function\") throw new Error(\"fn must be a function\");\n\t\t\t\t// initialize alertify if it hasn't already been done\n\t\t\t\tthis.init();\n\t\t\t\tcheck();\n\n\t\t\t\tqueue.push({ type: type, message: message, callback: fn, placeholder: placeholder, cssClass: cssClass });\n\t\t\t\tif (!isopen) this.setup();\n\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Extend the log method to create custom methods\n\t\t\t *\n\t\t\t * @param  {String} type    Custom method name\n\t\t\t *\n\t\t\t * @return {Function}\n\t\t\t */\n\t\t\textend : function (type) {\n\t\t\t\tif (typeof type !== \"string\") throw new Error(\"extend method must have exactly one paramter\");\n\t\t\t\treturn function (message, wait) {\n\t\t\t\t\tthis.log(message, type, wait);\n\t\t\t\t\treturn this;\n\t\t\t\t};\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Hide the dialog and rest to defaults\n\t\t\t *\n\t\t\t * @return {undefined}\n\t\t\t */\n\t\t\thide : function () {\n\t\t\t\tvar transitionDone,\n\t\t\t\t    self = this;\n\t\t\t\t// remove reference from queue\n\t\t\t\tqueue.splice(0,1);\n\t\t\t\t// if items remaining in the queue\n\t\t\t\tif (queue.length > 0) this.setup(true);\n\t\t\t\telse {\n\t\t\t\t\tisopen = false;\n\t\t\t\t\t// Hide the dialog box after transition\n\t\t\t\t\t// This ensure it doens't block any element from being clicked\n\t\t\t\t\ttransitionDone = function (event) {\n\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t// unbind event so function only gets called once\n\t\t\t\t\t\tself.unbind(elDialog, self.transition.type, transitionDone);\n\t\t\t\t\t};\n\t\t\t\t\t// whether CSS transition exists\n\t\t\t\t\tif (this.transition.supported) {\n\t\t\t\t\t\tthis.bind(elDialog, this.transition.type, transitionDone);\n\t\t\t\t\t\telDialog.className = \"alertify alertify-hide alertify-hidden\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\telDialog.className = \"alertify alertify-hide alertify-hidden alertify-isHidden\";\n\t\t\t\t\t}\n\t\t\t\t\telCover.className  = \"alertify-cover alertify-cover-hidden\";\n\t\t\t\t\t// set focus to the last element or body\n\t\t\t\t\t// after the dialog is closed\n\t\t\t\t\telCallee.focus();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Initialize Alertify\n\t\t\t * Create the 2 main elements\n\t\t\t *\n\t\t\t * @return {undefined}\n\t\t\t */\n\t\t\tinit : function () {\n\t\t\t\t// ensure legacy browsers support html5 tags\n\t\t\t\tdocument.createElement(\"nav\");\n\t\t\t\tdocument.createElement(\"article\");\n\t\t\t\tdocument.createElement(\"section\");\n\t\t\t\t// cover\n\t\t\t\tif ($(\"alertify-cover\") == null) {\n\t\t\t\t\telCover = document.createElement(\"div\");\n\t\t\t\t\telCover.setAttribute(\"id\", \"alertify-cover\");\n\t\t\t\t\telCover.className = \"alertify-cover alertify-cover-hidden\";\n\t\t\t\t\tdocument.body.appendChild(elCover);\n\t\t\t\t}\n\t\t\t\t// main element\n\t\t\t\tif ($(\"alertify\") == null) {\n\t\t\t\t\tisopen = false;\n\t\t\t\t\tqueue = [];\n\t\t\t\t\telDialog = document.createElement(\"section\");\n\t\t\t\t\telDialog.setAttribute(\"id\", \"alertify\");\n\t\t\t\t\telDialog.className = \"alertify alertify-hidden\";\n\t\t\t\t\tdocument.body.appendChild(elDialog);\n\t\t\t\t}\n\t\t\t\t// log element\n\t\t\t\tif ($(\"alertify-logs\") == null) {\n\t\t\t\t\telLog = document.createElement(\"section\");\n\t\t\t\t\telLog.setAttribute(\"id\", \"alertify-logs\");\n\t\t\t\t\telLog.className = \"alertify-logs alertify-logs-hidden\";\n\t\t\t\t\tdocument.body.appendChild(elLog);\n\t\t\t\t}\n\t\t\t\t// set tabindex attribute on body element\n\t\t\t\t// this allows script to give it focus\n\t\t\t\t// after the dialog is closed\n\t\t\t\tdocument.body.setAttribute(\"tabindex\", \"0\");\n\t\t\t\t// set transition type\n\t\t\t\tthis.transition = getTransitionEvent();\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Show a new log message box\n\t\t\t *\n\t\t\t * @param  {String} message    The message passed from the callee\n\t\t\t * @param  {String} type       [Optional] Optional type of log message\n\t\t\t * @param  {Number} wait       [Optional] Time (in ms) to wait before auto-hiding the log\n\t\t\t *\n\t\t\t * @return {Object}\n\t\t\t */\n\t\t\tlog : function (message, type, wait) {\n\t\t\t\t// check to ensure the alertify dialog element\n\t\t\t\t// has been successfully created\n\t\t\t\tvar check = function () {\n\t\t\t\t\tif (elLog && elLog.scrollTop !== null) return;\n\t\t\t\t\telse check();\n\t\t\t\t};\n\t\t\t\t// initialize alertify if it hasn't already been done\n\t\t\t\tthis.init();\n\t\t\t\tcheck();\n\n\t\t\t\telLog.className = \"alertify-logs\";\n\t\t\t\tthis.notify(message, type, wait);\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Add new log message\n\t\t\t * If a type is passed, a class name \"alertify-log-{type}\" will get added.\n\t\t\t * This allows for custom look and feel for various types of notifications.\n\t\t\t *\n\t\t\t * @param  {String} message    The message passed from the callee\n\t\t\t * @param  {String} type       [Optional] Type of log message\n\t\t\t * @param  {Number} wait       [Optional] Time (in ms) to wait before auto-hiding\n\t\t\t *\n\t\t\t * @return {undefined}\n\t\t\t */\n\t\t\tnotify : function (message, type, wait) {\n\t\t\t\tvar log = document.createElement(\"article\");\n\t\t\t\tlog.className = \"alertify-log\" + ((typeof type === \"string\" && type !== \"\") ? \" alertify-log-\" + type : \"\");\n\t\t\t\tlog.innerHTML = message;\n\t\t\t\t// append child\n\t\t\t\telLog.appendChild(log);\n\t\t\t\t// triggers the CSS animation\n\t\t\t\tsetTimeout(function() { log.className = log.className + \" alertify-log-show\"; }, 50);\n\t\t\t\tthis.close(log, wait);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Set properties\n\t\t\t *\n\t\t\t * @param {Object} args     Passing parameters\n\t\t\t *\n\t\t\t * @return {undefined}\n\t\t\t */\n\t\t\tset : function (args) {\n\t\t\t\tvar k;\n\t\t\t\t// error catching\n\t\t\t\tif (typeof args !== \"object\" && args instanceof Array) throw new Error(\"args must be an object\");\n\t\t\t\t// set parameters\n\t\t\t\tfor (k in args) {\n\t\t\t\t\tif (args.hasOwnProperty(k)) {\n\t\t\t\t\t\tthis[k] = args[k];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Common place to set focus to proper element\n\t\t\t *\n\t\t\t * @return {undefined}\n\t\t\t */\n\t\t\tsetFocus : function () {\n\t\t\t\tif (input) {\n\t\t\t\t\tinput.focus();\n\t\t\t\t\tinput.select();\n\t\t\t\t}\n\t\t\t\telse btnFocus.focus();\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Initiate all the required pieces for the dialog box\n\t\t\t *\n\t\t\t * @return {undefined}\n\t\t\t */\n\t\t\tsetup : function (fromQueue) {\n\t\t\t\tvar item = queue[0],\n\t\t\t\t    self = this,\n\t\t\t\t    transitionDone;\n\n\t\t\t\t// dialog is open\n\t\t\t\tisopen = true;\n\t\t\t\t// Set button focus after transition\n\t\t\t\ttransitionDone = function (event) {\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\tself.setFocus();\n\t\t\t\t\t// unbind event so function only gets called once\n\t\t\t\t\tself.unbind(elDialog, self.transition.type, transitionDone);\n\t\t\t\t};\n\t\t\t\t// whether CSS transition exists\n\t\t\t\tif (this.transition.supported && !fromQueue) {\n\t\t\t\t\tthis.bind(elDialog, this.transition.type, transitionDone);\n\t\t\t\t}\n\t\t\t\t// build the proper dialog HTML\n\t\t\t\telDialog.innerHTML = this.build(item);\n\t\t\t\t// assign all the common elements\n\t\t\t\tbtnReset  = $(\"alertify-resetFocus\");\n\t\t\t\tbtnResetBack  = $(\"alertify-resetFocusBack\");\n\t\t\t\tbtnOK     = $(\"alertify-ok\")     || undefined;\n\t\t\t\tbtnCancel = $(\"alertify-cancel\") || undefined;\n\t\t\t\tbtnFocus  = (_alertify.buttonFocus === \"cancel\") ? btnCancel : ((_alertify.buttonFocus === \"none\") ? $(\"alertify-noneFocus\") : btnOK),\n\t\t\t\tinput     = $(\"alertify-text\")   || undefined;\n\t\t\t\tform      = $(\"alertify-form\")   || undefined;\n\t\t\t\t// add placeholder value to the input field\n\t\t\t\tif (typeof item.placeholder === \"string\" && item.placeholder !== \"\") input.value = item.placeholder;\n\t\t\t\tif (fromQueue) this.setFocus();\n\t\t\t\tthis.addListeners(item.callback);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Unbind events to elements\n\t\t\t *\n\t\t\t * @param  {Object}   el       HTML Object\n\t\t\t * @param  {Event}    event    Event to detach to element\n\t\t\t * @param  {Function} fn       Callback function\n\t\t\t *\n\t\t\t * @return {undefined}\n\t\t\t */\n\t\t\tunbind : function (el, event, fn) {\n\t\t\t\tif (typeof el.removeEventListener === \"function\") {\n\t\t\t\t\tel.removeEventListener(event, fn, false);\n\t\t\t\t} else if (el.detachEvent) {\n\t\t\t\t\tel.detachEvent(\"on\" + event, fn);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn {\n\t\t\talert   : function (message, fn, cssClass) { _alertify.dialog(message, \"alert\", fn, \"\", cssClass); return this; },\n\t\t\tconfirm : function (message, fn, cssClass) { _alertify.dialog(message, \"confirm\", fn, \"\", cssClass); return this; },\n\t\t\textend  : _alertify.extend,\n\t\t\tinit    : _alertify.init,\n\t\t\tlog     : function (message, type, wait) { _alertify.log(message, type, wait); return this; },\n\t\t\tprompt  : function (message, fn, placeholder, cssClass) { _alertify.dialog(message, \"prompt\", fn, placeholder, cssClass); return this; },\n\t\t\tsuccess : function (message, wait) { _alertify.log(message, \"success\", wait); return this; },\n\t\t\terror   : function (message, wait) { _alertify.log(message, \"error\", wait); return this; },\n\t\t\tset     : function (args) { _alertify.set(args); },\n\t\t\tlabels  : _alertify.labels,\n\t\t\tdebug   : _alertify.handleErrors\n\t\t};\n\t};\n\n\t// AMD and window support\n\tif (typeof define === \"function\") {\n\t\tdefine([], function () { return new Alertify(); });\n\t} else if (typeof global.alertify === \"undefined\") {\n\t\tglobal.alertify = new Alertify();\n\t}\n\n}(this));\n"]],"start1":0,"start2":0,"length1":0,"length2":20015}]],"length":20015}
